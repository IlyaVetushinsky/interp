%{
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <stdarg.h>
#include "Calc4.h"
#include <FlexLexer.h>
//int FlexLexer::yylex();
extern std::ifstream fin;
/* prototypes */
Node *opr(int oper, int nops, ...);
Node *id(int i);
Node *con(int value);
void setlabel (int i ,Node *p);
void freeNode(Node *p);
int exec(Node *p);
void print_Tree(Node *p, int level);
int yylex();
void init (void);
void yyerror(char *s);
int sym[26]; /* symbol table */
Node* addr[26];
%}
%union {
 int iValue; /* integer value */
 char sIndex; /* symbol table index */
 Node *nPtr; /* node pointer */
};
%nonassoc END
%token <iValue> INTEGER
%token <sIndex> VARIABLE
%token WHILE IF PRINT GOTO
%nonassoc IFX
%nonassoc ELSE
%left GE LE EQ NE '>' '<'
%left '+' '-'
%left '*' '/'
%nonassoc UMINUS
%type <nPtr> stmt expr stmt_list function
%%
program:
 function { exec($1); print_Tree($1,0); freeNode($1); exit(0); }
 ;
function:
 function stmt { $$ = opr(';', 2, $1, $2);/*ex($2); freeNode($2);*/ }
 | /* NULL */ { init(); $$ = 0;}
 ;
stmt:
 ';' { $$ = opr(';', 2, NULL, NULL); }
 | expr ';' { $$ = $1; }
 | PRINT expr ';' { $$ = opr(PRINT, 1, $2); }
 | VARIABLE '=' expr ';' { $$ = opr('=', 2, id($1), $3); }
 | WHILE '(' expr ')' stmt { $$ = opr(WHILE, 2, $3, $5); }
 | IF '(' expr ')' stmt %prec IFX { $$ = opr(IF, 2, $3, $5); }
 | IF '(' expr ')' stmt ELSE stmt { $$ = opr(IF, 3, $3, $5, $7); }
 | '{' stmt_list '}' { $$ = $2; }
 | VARIABLE ':' stmt { setlabel ($1, $3); $$ = $3;}
| GOTO VARIABLE ';' { $$ = opr(GOTO, 1, id($2));}
 ;
stmt_list:
 stmt { $$ = $1; }
 | stmt_list stmt { $$ = opr(';', 2, $1, $2); }
 ;
expr:
 INTEGER { $$ = con($1); }
 | VARIABLE { $$ = id($1); }
 | '-' expr %prec UMINUS { $$ = opr(UMINUS, 1, $2); }
 | expr '+' expr { $$ = opr('+', 2, $1, $3); }
 | expr '-' expr { $$ = opr('-', 2, $1, $3); }
 | expr '/' expr { $$ = opr('/', 2, $1, $3); }
 | expr '*' expr { $$ = opr('*', 2, $1, $3); }
 | expr '<' expr { $$ = opr('<', 2, $1, $3); }
 | expr '>' expr { $$ = opr('>', 2, $1, $3); }
 | expr GE expr { $$ = opr(GE, 2, $1, $3); }
 | expr LE expr { $$ = opr(LE, 2, $1, $3); }
 | expr NE expr { $$ = opr(NE, 2, $1, $3); }
 | expr EQ expr { $$ = opr(EQ, 2, $1, $3); }
 | '(' expr ')' { $$ = $2; }
 ;
%%
Node *con(int value) {
	Node *p = new ConNode(value, typeCon);
	return p;
}
Node *id(int i) {
	Node *p = new VarNode(i, typeId);
	return p;
}
Node *opr(int oper, int nops, ...) {
	va_list ap;
	Node *p = new OprNode(oper, nops, typeOpr);
	va_start(ap, nops);
	for (int i = 0; i < nops; i++)
		p->children.push_back(va_arg(ap, Node*));
	va_end(ap);
	return p;
}
void freeNode(Node *p) {
	int i;
	if (!p) return;
	if (p->type == typeOpr) {
		OprNode* oprn = dynamic_cast<OprNode*>(p);
		for (i = 0; i < oprn->nops; i++)
			freeNode(oprn->children[i]);
	}
	delete (p);
}
void setlabel (int i,Node *p)
{
p->label = i;
addr[i] = p;
}
void init (void)
{
int i;
for (i = 0;i<26;++i)
sym[i] = 0, addr[i] = 0;
}
void yyerror(char *s) {
 fprintf(stdout, "%s\n", s);
}
int main(void) {
	std::ifstream fin("test.txt");
	yyparse();
	fin.close();
	return 0;
}